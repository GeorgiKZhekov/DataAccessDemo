@page "/allPeople"


@inject IPersonDataService _dataService

@if (People == null)
{
    <h3>Loading...</h3>
}
else
{
    <div class="row">
        <div class="col-md-@tableWidth">
            <table class="table table-striped">
                <thead class="thead-dark">
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">First Name</th>
                    <th scope="col">Last Name</th>
                    <th scope="col">Date of birth</th>
                    <th scope="col"></th>
                </tr>
                </thead>
                <tbody>
                @foreach (var person in People)
                {
                    <tr>
                        <th scope="row">@person.Id</th>
                        <td>@person.FirstName</td>
                        <td>@person.LastName</td>
                        <td>@person.DateOfBirth</td>
                        <td>
                            <button class="btn btn-outline-primary"
                                    @onclick="(() => UpdatePerson(person.Id))">Edit Person</button>
                            <button class="btn btn-outline-danger"
                                    @onclick="(() => HandleDeleteClick(person.Id))">Delete</button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
        @if (showEditForm)
        {
            <div class="col-md-4">
                <UpdatePerson CloseEditForm="showEditForm" Id="@idToUpdate" OnUpdate="HandleOnUpdate"></UpdatePerson>
            </div>
        }
    </div>
}
@if (showDeletePopUp)
{
    <div class="modal" tabindex="-1" style="display: block">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Remove person!</h5>
                    <button type="button" 
                            class="btn-close" 
                            @onclick="() => showDeletePopUp = false" 
                            aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure that you want to remove @personToDelete?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" 
                            class="btn btn-secondary"
                            @onclick="() => showDeletePopUp = false">Close</button>
                    <button type="button" 
                            class="btn btn-danger" 
                            @onclick="(() => DeletePerson(idToDelete))">Delete Person</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    //public List<IPersonModel> _people = new List<IPersonModel>();

    [Parameter]
    public List<IPersonModel> People { get; set; }

    [Parameter]
    public EventCallback<List<IPersonModel>> OnChange { get; set; }

    private string personToDelete;
    private bool showEditForm = false;
    private bool showDeletePopUp = false;
    private int idToUpdate;
    private int idToDelete;
    private int tableWidth = 12;

    private void HandleDeleteClick(int id)
    {
        personToDelete = People.FirstOrDefault(x => x.Id == id).FirstName;
        showDeletePopUp = true;
        idToDelete = id;
    }

    private void UpdatePerson(int id)
    {
        idToUpdate = id;
        tableWidth = 8;
        showEditForm = true;
    }

    private void HandleOnUpdate(IPersonModel person)
    {
        showEditForm = false;
        tableWidth = 12;
        var personToUpdate = People.FirstOrDefault(x => x.Id == person.Id);
        if (personToUpdate is not null)
        {
            personToUpdate.FirstName = person.FirstName;
            personToUpdate.LastName = person.LastName;
            personToUpdate.DateOfBirth = person.DateOfBirth;
        }
    }

    private async Task DeletePerson(int id)
    {
        await _dataService.DeletePerson(id);
        var personToDelete = People.FirstOrDefault(x => x.Id == id);
        if (personToDelete is not null)
        {
            People.Remove(personToDelete);
        }
        showDeletePopUp = false;
    }

    protected override async Task OnParametersSetAsync()
    {
        People = await _dataService.ReadPeople();
        await OnChange.InvokeAsync(People);
    }
}
